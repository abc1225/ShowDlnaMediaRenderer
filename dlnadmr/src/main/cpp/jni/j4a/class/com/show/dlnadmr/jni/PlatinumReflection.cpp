/*
 * Copyright (C) 2015 Zhang Rui <bbcallen@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * https://github.com/Bilibili/jni4android
 * This file is automatically generated by jni4android, do not modify.
 */

#include "PlatinumReflection.h"

typedef struct J4AC_com_show_dlnadmr_jni_PlatinumReflection {
    jclass id;

    jmethodID method_onActionReflection;
} J4AC_com_show_dlnadmr_jni_PlatinumReflection;

static J4AC_com_show_dlnadmr_jni_PlatinumReflection class_J4AC_com_show_dlnadmr_jni_PlatinumReflection;

void J4AC_com_show_dlnadmr_jni_PlatinumReflection__onActionReflection(JNIEnv *env, jint what, const char* value, const char* data)
{
    jstring jvalue = NULL;
    jstring jdata = NULL;

    jvalue = env->NewStringUTF(value);
    if (J4A_ExceptionCheck__catchAll(env) || !jvalue)
        goto fail;
    jdata = env->NewStringUTF(data);
    if (J4A_ExceptionCheck__catchAll(env) || !jdata)
        goto fail;

    env->CallStaticVoidMethod(class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.id, class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.method_onActionReflection, what, jvalue, jdata);

    fail:
    J4A_DeleteLocalRef__p(env, (jobject*)&jvalue);
    J4A_DeleteLocalRef__p(env, (jobject*)&jdata);
    return;
}

void J4AC_com_show_dlnadmr_jni_PlatinumReflection__onActionReflection__catchAll(JNIEnv *env, jint cmd,
                                                                                                const char* value, const char* data)
{
	J4AC_com_show_dlnadmr_jni_PlatinumReflection__onActionReflection(env, cmd, value, data);
    J4A_ExceptionCheck__catchAll(env);

    return;
}

int J4A_loadClass__J4AC_com_show_dlnadmr_jni_PlatinumReflection(JNIEnv *env)
{
    int         ret                   = -1;
    const char *J4A_UNUSED(name)      = NULL;
    const char *J4A_UNUSED(sign)      = NULL;
    jclass      J4A_UNUSED(class_id)  = NULL;
    int         J4A_UNUSED(api_level) = 0;

    if (class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.id != NULL) {
        return ret;
    }

    sign = "com/show/dlnadmr/jni/PlatinumReflection";
    class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.id = J4A_FindClass__asGlobalRef__catchAll(env, sign);
    if (class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.id == NULL)
        goto fail;

    class_id = class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.id;
    name     = "onActionReflection";
    sign     = "(ILjava/lang/String;Ljava/lang/String;)V";
    class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.method_onActionReflection = J4A_GetStaticMethodID__catchAll(env, class_id, name, sign);
    if (class_J4AC_com_show_dlnadmr_jni_PlatinumReflection.method_onActionReflection == NULL)
        goto fail;

    J4A_ALOGD("J4ALoader: OK: '%s' loaded\n", "com.show.dlnadmr.PlatinumReflection");
    ret = 0;
    fail:
    return ret;
}
